%% Copyright (c) 2017 NXP

%implements AMCLIB_CurrentLoop_SF_FLT "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void
    %<LibAddToCommonIncludes("<stdbool.h>")>
    %if !EXISTS("AMCLIB_INCLUDED")
        %assign ::AMCLIB_INCLUDED = 1
        %<LibCacheIncludes("#include \"amclib.h\"" + "\n")>
      %endif

    %assign ::cnt = 0
    %assign ::cntInit = 0
%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output

%assign ::cntInit = %<::cntInit> + 1

%assign fFIRparams = LibCreateSourceFile("Source", "Custom", "AMCLIBparams")
%openfile tmpParamBuf
    %if !EXISTS("STDBOOL_INCLUDED_TO_AMCLIBPARAMS")
        %assign ::STDBOOL_INCLUDED_TO_AMCLIBPARAMS = 1
        #include <stdbool.h>
    %endif
    %if !EXISTS("AMCLIB_INCLUDED_TO_AMCLIBPARAMS")
        %assign ::AMCLIB_INCLUDED_TO_AMCLIBPARAMS = 1
        #include "amclib.h"
    %endif

    bool CurrentLoop_%<::cntInit>_initialized = false;
    AMCLIB_CURRENT_LOOP_T_FLT CurrentLoop_%<::cntInit>;

%closefile tmpParamBuf
%<LibSetSourceFileSection(fFIRparams , "Definitions", tmpParamBuf)>

%openfile tmpParamExternBuf
    extern bool CurrentLoop_%<::cntInit>_initialized;
    extern  AMCLIB_CURRENT_LOOP_T_FLT CurrentLoop_%<::cntInit>;
%closefile tmpParamExternBuf
%<LibCacheExtern(tmpParamExternBuf)>

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

    %assign ::cnt = %<::cnt> + 1

    %assign fltCC1scD = CAST("Real32", Parameter[0].Value[0])
    %assign fltCC2scD = CAST("Real32", Parameter[1].Value[0])
    %assign fltCC1scQ = CAST("Real32", Parameter[2].Value[0])
    %assign fltCC2scQ = CAST("Real32", Parameter[3].Value[0])

    %assign fltUDcBus = LibBlockInputSignal(0, "", "", 0)
    %assign fltIDReq = LibBlockInputSignal(1, "", "", 0)
    %assign fltIQReq = LibBlockInputSignal(2, "", "", 0)
    %assign fltIDFbck = LibBlockInputSignal(3, "", "", 0)
    %assign fltIQFbck = LibBlockInputSignal(4, "", "", 0)
    %assign fltAccD = LibBlockInputSignal(5, "", "", 0)
    %assign fltInErrK1D = LibBlockInputSignal(6, "", "", 0)
    %assign fltAccQ = LibBlockInputSignal(7, "", "", 0)
    %assign fltInErrK1Q = LibBlockInputSignal(8, "", "", 0)

    %assign pOutAccD = LibBlockOutputSignal(0, "", "", 0)
    %assign pOutInErrK1D = LibBlockOutputSignal(1, "", "", 0)
    %assign pOutAccQ = LibBlockOutputSignal(2, "", "", 0)
    %assign pOutInErrK1Q = LibBlockOutputSignal(3, "", "", 0)
    %assign pOutUDReq = LibBlockOutputSignal(4, "", "", 0)
    %assign pOutUQReq = LibBlockOutputSignal(5, "", "", 0)

    {

    SWLIBS_2Syst_FLT UDQReq;
    SWLIBS_2Syst_FLT IDQReqLocal;
    SWLIBS_2Syst_FLT IDQFbckLocal;

    IDQReqLocal.fltArg1 = %<fltIDReq>;
    IDQReqLocal.fltArg2 = %<fltIQReq>;
    IDQFbckLocal.fltArg1 = %<fltIDFbck>;
    IDQFbckLocal.fltArg2 = %<fltIQFbck>;


    if (!CurrentLoop_%<::cnt>_initialized) {

        CurrentLoop_%<::cnt>.pPIrAWD.fltCC1sc = %<fltCC1scD>;
        CurrentLoop_%<::cnt>.pPIrAWD.fltCC2sc = %<fltCC2scD>;

        CurrentLoop_%<::cnt>.pPIrAWQ.fltCC1sc = %<fltCC1scQ>;
        CurrentLoop_%<::cnt>.pPIrAWQ.fltCC2sc = %<fltCC2scQ>;

        CurrentLoop_%<::cnt>.pIDQReq = &IDQReqLocal;
        CurrentLoop_%<::cnt>.pIDQFbck = &IDQFbckLocal;

        AMCLIB_CurrentLoopInit_FLT(&CurrentLoop_%<::cnt>);
        CurrentLoop_%<::cnt>_initialized = true;
}
        CurrentLoop_%<::cnt>.pPIrAWD.fltAcc = %<fltAccD>;
        CurrentLoop_%<::cnt>.pPIrAWD.fltInErrK1 = %<fltInErrK1D>;
        CurrentLoop_%<::cnt>.pPIrAWQ.fltAcc = %<fltAccQ>;
        CurrentLoop_%<::cnt>.pPIrAWQ.fltInErrK1 = %<fltInErrK1Q>;

        AMCLIB_CurrentLoop_FLT(%<fltUDcBus>, &UDQReq, &CurrentLoop_%<::cnt>);

        %<pOutAccD> = CurrentLoop_%<::cnt>.pPIrAWD.fltAcc;
        %<pOutInErrK1D> = CurrentLoop_%<::cnt>.pPIrAWD.fltInErrK1;
        %<pOutAccQ> = CurrentLoop_%<::cnt>.pPIrAWQ.fltAcc;
        %<pOutInErrK1Q> = CurrentLoop_%<::cnt>.pPIrAWQ.fltInErrK1;
        %<pOutUDReq> = UDQReq.fltArg1;
        %<pOutUQReq> = UDQReq.fltArg2;
}


%endfunction
