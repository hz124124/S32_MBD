%% Copyright (c) 2017 NXP

%implements AMCLIB_SpeedLoop_SF_FLT "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void
    %<LibAddToCommonIncludes("<stdbool.h>")>
    %if !EXISTS("AMCLIB_INCLUDED")
        %assign ::AMCLIB_INCLUDED = 1
        %<LibCacheIncludes("#include \"amclib.h\"" + "\n")>
    %endif

    %assign ::cnt = 0
    %assign ::cntInit = 0

%endfunction

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output

%assign ::cntInit = %<::cntInit> + 1

%assign fFIRparams = LibCreateSourceFile("Source", "Custom", "AMCLIBparams")
%openfile tmpParamBuf
    %if !EXISTS("STDBOOL_INCLUDED_TO_AMCLIBPARAMS")
        %assign ::STDBOOL_INCLUDED_TO_AMCLIBPARAMS = 1
        #include <stdbool.h>
    %endif
    %if !EXISTS("AMCLIB_INCLUDED_TO_AMCLIBPARAMS")
        %assign ::AMCLIB_INCLUDED_TO_AMCLIBPARAMS = 1
        #include "amclib.h"
    %endif

bool SpeedLoop_%<::cntInit>_initialized = false;
AMCLIB_SPEED_LOOP_T_FLT SpeedLoop_%<::cntInit>;

%closefile tmpParamBuf
%<LibSetSourceFileSection(fFIRparams , "Definitions", tmpParamBuf)>

%openfile tmpParamExternBuf
    extern bool SpeedLoop_%<::cntInit>_initialized;
    extern  AMCLIB_SPEED_LOOP_T_FLT SpeedLoop_%<::cntInit>;
%closefile tmpParamExternBuf
%<LibCacheExtern(tmpParamExternBuf)>

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs =====================================================
%% Abstract:
%%
%function Outputs(block, system) Output

%assign ::cnt = %<::cnt> + 1

%assign fltLambdaW = CAST("Real32", Parameter[0].Value[0])
%assign fltPropGainQ = CAST("Real32", Parameter[1].Value[0])
%assign fltIntegGainQ = CAST("Real32", Parameter[2].Value[0])
%assign fltRampUp = CAST("Real32", Parameter[3].Value[0])
%assign fltRampDown = CAST("Real32", Parameter[4].Value[0])

%assign fltVelocityReq = LibBlockInputSignal(0, "", "", 0)
%assign fltVelocityFbck = LibBlockInputSignal(1, "", "", 0)
%assign fltAccW = LibBlockInputSignal(2, "", "", 0)
%assign fltUpperLimitQ = LibBlockInputSignal(3, "", "", 0)
%assign fltLowerLimitQ = LibBlockInputSignal(4, "", "", 0)
%assign fltInK_1Q = LibBlockInputSignal(5, "", "", 0)
%assign fltIntegPartK_1Q = LibBlockInputSignal(6, "", "", 0)
%assign fltRampState = LibBlockInputSignal(7, "", "", 0)

%assign pOutRampState = LibBlockOutputSignal(0, "", "", 0)
%assign pOutIntegPartK_1Q = LibBlockOutputSignal(1, "", "", 0)
%assign pOutInK_1Q = LibBlockOutputSignal(2, "", "", 0)
%assign pOutLimitFlagQ = LibBlockOutputSignal(3, "", "", 0)
%assign pOutAccW = LibBlockOutputSignal(4, "", "", 0)
%assign pOutIQReq = LibBlockOutputSignal(5, "", "", 0)

{
    SWLIBS_2Syst_FLT IDQReq;

    if (!SpeedLoop_%<::cnt>_initialized) {

    SpeedLoop_%<::cnt>.pFilterW.fltLambda = %<fltLambdaW>;
    SpeedLoop_%<::cnt>.pPIpAWQ.fltPropGain = %<fltPropGainQ>;
    SpeedLoop_%<::cnt>.pPIpAWQ.fltIntegGain = %<fltIntegGainQ>;

    SpeedLoop_%<::cnt>.pRamp.fltRampUp = %<fltRampUp>;
    SpeedLoop_%<::cnt>.pRamp.fltRampDown = %<fltRampDown>;

    AMCLIB_SpeedLoopInit_FLT (&SpeedLoop_%<::cnt>);
    SpeedLoop_%<::cnt>_initialized = true;
}
    SpeedLoop_%<::cnt>.pFilterW.fltAcc = %<fltAccW>;
    SpeedLoop_%<::cnt>.pPIpAWQ.fltIntegPartK_1 = %<fltIntegPartK_1Q>;
    SpeedLoop_%<::cnt>.pPIpAWQ.fltInK_1 = %<fltInK_1Q>;
    SpeedLoop_%<::cnt>.pRamp.fltState = %<fltRampState>;

    SpeedLoop_%<::cnt>.pPIpAWQ.fltLowerLimit = %<fltLowerLimitQ>;
    SpeedLoop_%<::cnt>.pPIpAWQ.fltUpperLimit = %<fltUpperLimitQ>;

    AMCLIB_SpeedLoop_FLT (%<fltVelocityReq>, %<fltVelocityFbck>,&IDQReq, &SpeedLoop_%<::cnt>);

    %<pOutRampState> = SpeedLoop_%<::cnt>.pRamp.fltState;
    %<pOutIntegPartK_1Q> = SpeedLoop_%<::cnt>.pPIpAWQ.fltIntegPartK_1;
    %<pOutInK_1Q> = SpeedLoop_%<::cnt>.pPIpAWQ.fltInK_1;
    %<pOutLimitFlagQ> = SpeedLoop_%<::cnt>.pPIpAWQ.u16LimitFlag;
    %<pOutAccW> = SpeedLoop_%<::cnt>.pFilterW.fltAcc;
    %<pOutIQReq> = IDQReq.fltArg2;
}

%endfunction