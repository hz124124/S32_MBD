
%implements GMCLIB_ElimDcBusRip_SF_F16 "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign f16ModIndex     = CAST("Number",Parameter[0].Value[0])

  %assign alphaIn  = LibBlockInputSignal(0, "", "", 0)
  %assign betaIn   = LibBlockInputSignal(1, "", "", 0)
  %assign f16ArgDcBusMsr = LibBlockInputSignal(2, "", "", 0)
  %assign alphaOut = LibBlockOutputSignal(0, "", "", 0)
  %assign betaOut  = LibBlockOutputSignal(1, "", "", 0)
  
  {  
    SWLIBS_2Syst_F16 Out;
	SWLIBS_2Syst_F16 In;
	const SWLIBS_2Syst_F16 *const pIn = &In;
    static GMCLIB_ELIMDCBUSRIP_T_F16 param = { 0, %<f16ModIndex> };
	static const GMCLIB_ELIMDCBUSRIP_T_F16 *const pParam = &param;
	
	In.f16Arg1 = %<alphaIn>;
	In.f16Arg2 = %<betaIn>; 
	param.f16ArgDcBusMsr = %<f16ArgDcBusMsr>;
    GMCLIB_ElimDcBusRip_F16 (&Out, pIn, pParam);
	%<alphaOut> = Out.f16Arg1;
	%<betaOut>  = Out.f16Arg2;
  }

%endfunction
