
%implements GMCLIB_ParkInv_SF_FLT "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign d     = LibBlockInputSignal(0, "", "", 0)
  %assign q     = LibBlockInputSignal(1, "", "", 0)
  %assign sin   = LibBlockInputSignal(2, "", "", 0)
  %assign cos   = LibBlockInputSignal(3, "", "", 0)
  %assign alpha = LibBlockOutputSignal(0, "", "", 0)
  %assign beta  = LibBlockOutputSignal(1, "", "", 0)
  
  {  
    SWLIBS_2Syst_FLT Out;
	SWLIBS_2Syst_FLT In;
	SWLIBS_2Syst_FLT InAngle;
	const SWLIBS_2Syst_FLT *const pIn = &In;
	const SWLIBS_2Syst_FLT *const pInAngle = &InAngle;
	
	In.fltArg1 = %<d>;
	In.fltArg2 = %<q>; 
    InAngle.fltArg1 = %<sin>;
    InAngle.fltArg2 = %<cos>;
    GMCLIB_ParkInv_FLT(&Out, pInAngle, pIn);
	%<alpha> = Out.fltArg1;
	%<beta> = Out.fltArg2;
  }

%endfunction
