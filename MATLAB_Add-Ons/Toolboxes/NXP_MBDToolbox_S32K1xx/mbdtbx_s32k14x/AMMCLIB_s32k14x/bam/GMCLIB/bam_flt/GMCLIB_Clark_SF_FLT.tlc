
%implements GMCLIB_Clark_SF_FLT "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign a     = LibBlockInputSignal(0, "", "", 0)
  %assign b     = LibBlockInputSignal(1, "", "", 0)
  %assign c     = LibBlockInputSignal(2, "", "", 0)
  %assign alpha = LibBlockOutputSignal(0, "", "", 0)
  %assign beta  = LibBlockOutputSignal(1, "", "", 0)
  
  {  
    SWLIBS_2Syst_FLT Out;
	SWLIBS_3Syst_FLT In;
	const SWLIBS_3Syst_FLT *const pIn = &In;
	
	In.fltArg1 = %<a>;
	In.fltArg2 = %<b>; 
	In.fltArg3 = %<c>;
    GMCLIB_Clark_FLT(&Out, pIn);
	%<alpha> = Out.fltArg1;
	%<beta> = Out.fltArg2;
  }

%endfunction
