
%implements GFLIB_VectorLimit_SF_FLT "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GFLIB_INCLUDED")
      %assign ::GFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gflib.h\"" + "\n")>
   %endif 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

   %assign s32Lim   = CAST("Real32",Parameter[0].Value[0])

   %assign InD = LibBlockInputSignal(0, "", "", 0)
   %assign InQ = LibBlockInputSignal(1, "", "", 0)
   %assign OutD = LibBlockOutputSignal(0, "", "", 0)
   %assign OutQ = LibBlockOutputSignal(1, "", "", 0)
   %assign bFlag = LibBlockOutputSignal(2, "", "", 0)
   
   {  
	 static const GFLIB_VECTORLIMIT_T_FLT param = { %<s32Lim> };
	 static SWLIBS_2Syst_FLT In;
	 static SWLIBS_2Syst_FLT Out;
	 SWLIBS_2Syst_FLT *const pIn = &In; 
	 SWLIBS_2Syst_FLT *const pOut = &Out; 
	 
	 pIn->fltArg1 = %<InD>;
	 pIn->fltArg2 = %<InQ>;
     %<bFlag> = GFLIB_VectorLimit_FLT(pOut,pIn,&param);
	 %<OutD> = pOut->fltArg1;
	 %<OutQ> = pOut->fltArg2;
   }

%endfunction
