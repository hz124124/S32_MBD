%% Copyright (c) 2019 NXP

%implements GFLIB_ControllerPIDpAW_SF_FLT "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GFLIB_INCLUDED")
      %assign ::GFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gflib.h\"" + "\n")>
   %endif 

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

   %assign fltPropGain = CAST("Real32",Parameter[0].Value[0])
   %assign fltIntegGain = CAST("Real32",Parameter[1].Value[0])
   %assign fltDerivGain = CAST("Real32",Parameter[2].Value[0])
   %assign fltFiltCoef = CAST("Real32",Parameter[3].Value[0])

   %assign x = LibBlockInputSignal(0, "", "", 0)
   %assign x1 = LibBlockInputSignal(1, "", "", 0)
   %assign x2 = LibBlockInputSignal(2, "", "", 0)
   %assign x3 = LibBlockInputSignal(3, "", "", 0)
   %assign x4 = LibBlockInputSignal(4, "", "", 0)
   %assign x5 = LibBlockInputSignal(5, "", "", 0)
   %assign y = LibBlockOutputSignal(0, "", "", 0)
   %assign y1 = LibBlockOutputSignal(1, "", "", 0)
   %assign y2 = LibBlockOutputSignal(2, "", "", 0)
   %assign y3 = LibBlockOutputSignal(3, "", "", 0)
   %assign y4 = LibBlockOutputSignal(4, "", "", 0)

   {  
	 static GFLIB_CONTROLLER_PID_P_AW_T_FLT param = { %<fltPropGain>, %<fltIntegGain>, %<fltDerivGain>, %<fltFiltCoef>, 0, 0, 0, 0, 0, 0};
	 param.fltLowerLimit =%<x2>;
     param.fltUpperLimit = %<x1>;
     param.fltIntegPartK_1 = %<x4>;
     param.fltDerivPartK_1 = %<x5>;
     param.fltInK_1 = %<x3>;

     %<y> = GFLIB_ControllerPIDpAW_FLT(%<x>, &param);
	 %<y1> = param.u16LimitFlag;

	 %<y2> = param.fltInK_1;
     %<y3> = param.fltIntegPartK_1;
     %<y4> = param.fltDerivPartK_1;
   }

%endfunction
