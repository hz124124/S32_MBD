
%implements GFLIB_ControllerPIpAW_SF_F16 "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GFLIB_INCLUDED")
      %assign ::GFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gflib.h\"" + "\n")>
   %endif 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

   %assign f16PropGain   = CAST("Number",Parameter[0].Value[0])
   %assign s16PropGainShift   = CAST("Number",Parameter[1].Value[0])
   %assign f16IntegGain  = CAST("Number",Parameter[2].Value[0])
   %assign s16IntegGainShift  = CAST("Number",Parameter[3].Value[0])

   %assign x1 = LibBlockInputSignal(0, "", "", 0)
   %assign x2 = LibBlockInputSignal(1, "", "", 0)
   %assign x3 = LibBlockInputSignal(2, "", "", 0)
   %assign x4 = LibBlockInputSignal(3, "", "", 0)
   %assign x5 = LibBlockInputSignal(4, "", "", 0)
   %assign y1 = LibBlockOutputSignal(0, "", "", 0)
   %assign y2 = LibBlockOutputSignal(1, "", "", 0)
   %assign y3 = LibBlockOutputSignal(2, "", "", 0)
   %assign y4 = LibBlockOutputSignal(3, "", "", 0)

   {  
	 static GFLIB_CONTROLLER_PIAW_P_T_F16 param = { %<f16PropGain>, %<f16IntegGain>, %<s16PropGainShift>, %<s16IntegGainShift>, 0, 0, 0, 0, 0};
     
	 param.f16UpperLimit = %<x2>;
	 param.f16LowerLimit = %<x3>;
     param.f16InK_1 = %<x4>;
	 param.f32IntegPartK_1 = %<x5>;
	 %<y1> = GFLIB_ControllerPIpAW_F16(%<x1>,&param);
	 %<y2> = param.u16LimitFlag;
     %<y3> = param.f16InK_1;
     %<y4> = param.f32IntegPartK_1;
	 }

%endfunction
