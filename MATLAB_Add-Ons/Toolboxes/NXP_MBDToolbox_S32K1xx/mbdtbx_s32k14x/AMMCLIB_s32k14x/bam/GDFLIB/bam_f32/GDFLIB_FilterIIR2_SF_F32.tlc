
%implements GDFLIB_FilterIIR2_SF_F32 "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GDFLIB_INCLUDED")
      %assign ::GDFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gdflib.h\"" + "\n")>
   %endif

   %assign ::cntIIR2 = 0
   %assign ::cntInitIIR2 = 0

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output

   %assign ::cntInitIIR2 = %<::cntInitIIR2> + 1

%assign fFIRparams = LibCreateSourceFile("Source", "Custom", "FIRparams")
%openfile tmpParamBuf
   %if !EXISTS("GDFLIB_INCLUDED_TO_FIRPARAM")
      %assign ::GDFLIB_INCLUDED_TO_FIRPARAM = 1
      #include "gdflib.h"
   %endif
    GDFLIB_FILTER_IIR2_T_F32 trMyFilterIIR2_%<::cntInitIIR2> = GDFLIB_FILTER_IIR2_DEFAULT_F32;
%closefile tmpParamBuf
%<LibSetSourceFileSection(fFIRparams , "Definitions", tmpParamBuf)>

    %assign B0   = CAST("Number",Parameter[0].Value[0])
    %assign B1   = CAST("Number",Parameter[1].Value[0])
    %assign B2   = CAST("Number",Parameter[2].Value[0])
    %assign A1   = CAST("Number",Parameter[3].Value[0])
    %assign A2   = CAST("Number",Parameter[4].Value[0])

    trMyFilterIIR2_%<::cntInitIIR2>.trFiltCoeff.f32B0 = %<B0>;
    trMyFilterIIR2_%<::cntInitIIR2>.trFiltCoeff.f32B1 = %<B1>;
    trMyFilterIIR2_%<::cntInitIIR2>.trFiltCoeff.f32B2 = %<B2>;
    trMyFilterIIR2_%<::cntInitIIR2>.trFiltCoeff.f32A1 = %<A1>;
    trMyFilterIIR2_%<::cntInitIIR2>.trFiltCoeff.f32A2 = %<A2>;

    GDFLIB_FilterIIR2Init_F32(&trMyFilterIIR2_%<::cntInitIIR2>);

%openfile tmpParamExternBuf
    extern GDFLIB_FILTER_IIR2_T_F32 trMyFilterIIR2_%<::cntInitIIR2>;
%closefile tmpParamExternBuf
%<LibCacheExtern(tmpParamExternBuf)>

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

    %assign ::cntIIR2 = %<::cntIIR2> + 1

    %assign f32In = LibBlockInputSignal(0, "", "", 0)
    %assign f32InFiltBufferX1 = LibBlockInputSignal(1, "", "", 0)
    %assign f32InFiltBufferX2 = LibBlockInputSignal(2, "", "", 0)
    %assign f32InFiltBufferY1 = LibBlockInputSignal(3, "", "", 0)
    %assign f32InFiltBufferY2 = LibBlockInputSignal(4, "", "", 0)
    %assign f32Out = LibBlockOutputSignal(0, "", "", 0)
    %assign f32OutFiltBufferX1 = LibBlockOutputSignal(1, "", "", 0)
    %assign f32OutFiltBufferX2 = LibBlockOutputSignal(2, "", "", 0)
    %assign f32OutFiltBufferY1 = LibBlockOutputSignal(3, "", "", 0)
    %assign f32OutFiltBufferY2 = LibBlockOutputSignal(4, "", "", 0)

    trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferX[0] = %<f32InFiltBufferX1>;
    trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferX[1] = %<f32InFiltBufferX2>;
    trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferY[0] = %<f32InFiltBufferY1>;
    trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferY[1] = %<f32InFiltBufferY2>;

    %<f32Out> = GDFLIB_FilterIIR2_F32(%<f32In>, &trMyFilterIIR2_%<::cntIIR2>);

    %<f32OutFiltBufferX1> = trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferX[0];
    %<f32OutFiltBufferX2> = trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferX[1];
    %<f32OutFiltBufferY1> = trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferY[0];
    %<f32OutFiltBufferY2> = trMyFilterIIR2_%<::cntIIR2>.f32FiltBufferY[1];

%endfunction
