
%implements GDFLIB_FilterFIR_SF_FLT "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GDFLIB_INCLUDED")
      %assign ::GDFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gdflib.h\"" + "\n")>
   %endif

   %assign ::cntFIR = 0
   %assign ::cntInitFIR = 0

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output

   %assign ::cntInitFIR = %<::cntInitFIR> + 1

   %assign Order   = CAST("Number",Parameter[0].Value[0])
   %if ( FEVAL("mbd_s32k_version_is_newer_than", "2016"))
      %assign VectCoefBuf = SLibGetValueFromParamRec(Parameter[1], TLC_FALSE)
   %else
      %assign VectCoefBuf = GetValueFromParamRec(Parameter[1])
   %endif
   %assign VectCoefSize = LibBlockParameterSize(Parameter[1])

%assign fFIRparams = LibCreateSourceFile("Source", "Custom", "FIRparams")
%openfile tmpParamBuf
   %if !EXISTS("GDFLIB_INCLUDED_TO_FIRPARAM")
      %assign ::GDFLIB_INCLUDED_TO_FIRPARAM = 1
      #include "gdflib.h"
   %endif
    %% The 3rd input and output ports are declared in mex as a SS_SINGLE[256] array.
    float InBufFIR_%<::cntInitFIR>[256];
    float CoefBufFIR_%<::cntInitFIR>[] = {
        %foreach idx =  VectCoefSize[1]
            %if idx > 0
            , \
            %endif
            %<VectCoefBuf[idx]> \
        %endforeach
    };
    const GDFLIB_FILTERFIR_PARAM_T_FLT paramFIR_%<::cntInitFIR> = { %<Order>, &CoefBufFIR_%<::cntInitFIR>[0] };
    GDFLIB_FILTERFIR_STATE_T_FLT stateFIR_%<::cntInitFIR>;
%closefile tmpParamBuf
%<LibSetSourceFileSection(fFIRparams , "Definitions", tmpParamBuf)>

   GDFLIB_FilterFIRInit_FLT (&paramFIR_%<::cntInitFIR>, &stateFIR_%<::cntInitFIR>, &InBufFIR_%<::cntInitFIR>[0]);

%openfile tmpParamExternBuf
    extern float InBufFIR_%<::cntInitFIR>[];
    extern float CoefBufFIR_%<::cntInitFIR>[];
    extern const GDFLIB_FILTERFIR_PARAM_T_FLT paramFIR_%<::cntInitFIR>;
    extern GDFLIB_FILTERFIR_STATE_T_FLT stateFIR_%<::cntInitFIR>;
%closefile tmpParamExternBuf
%<LibCacheExtern(tmpParamExternBuf)>

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

    %assign ::cntFIR = %<::cntFIR> + 1

    %assign fltIn = LibBlockInputSignal(0, "", "", 0)
    %assign u32InIdx = LibBlockInputSignal(1, "", "", 0)
    %assign pfltInBuf = LibBlockInputSignalAddr(2, "", "", 0)
    %assign fltOut = LibBlockOutputSignal(0, "", "", 0)
    %assign u32OutIdx = LibBlockOutputSignal(1, "", "", 0)
    %assign pfltOutBuf = LibBlockOutputSignalAddr(2, "", "", 0)

	stateFIR_%<::cntFIR>.u32Idx = %<u32InIdx>;
    memcpy(stateFIR_%<::cntFIR>.pInBuf, %<pfltInBuf>, sizeof(tFloat) << 8U);

    %<fltOut> = GDFLIB_FilterFIR_FLT(%<fltIn>, &paramFIR_%<::cntFIR>, &stateFIR_%<::cntFIR>);
    
	%<u32OutIdx> = stateFIR_%<::cntFIR>.u32Idx;
	memcpy(%<pfltOutBuf>, stateFIR_%<::cntFIR>.pInBuf, sizeof(tFloat) << 8U);

%endfunction
