%% Copyright (c) 2019 NXP.
%% All rights reserved.
%%
%% Abstract:
%%   Library file to create a main for ERT based code for a given model.
%%
%selectfile NULL_FILE

%function SLibRAppIDMain(fName) void
    %assign config_params = FEVAL("mbd_s32k_get_main_config_params")
    %include "mbd_s32k_as_clock_settings.tlc"

    %assign codeProfilingEnabled = FEVAL("mbd_s32k_code_profiling_enabled")

    %assign filesep  = FEVAL("filesep")
    %assign root_dir = FEVAL("mbd_find_s32k_root")
    %addincludepath root_dir + filesep + "mbdtbx_s32k"

    %include "mbd_s32k_rtiostream_uart_init.tlc"
    %assign cFile = SLibAddModelFile("SystemBody", "Simulink", "mbd_hw_init")

    %assign period = FcnGetPeriodFromTID(0)

    %assign mcu_steptick_timer = FEVAL("mbd_s32k_get_config_param", "mcu_steptick_timer")
    %assign rbl_download_enable = FEVAL("mbd_s32k_get_config_param", "rbl_download_enable")

    %openfile tmpFcnBuf
    /* Model's headers */
    #include "device_registers.h"
    %% device_registers.h should be first as rtwtypes.h should be after Platform_Types.h
    #include "%<FcnGetPublicModelHeaderFile()>"

    %% profiler is enabled by default
    %if codeProfilingEnabled == 1
    #include "gt_pf.h"
    %endif

    #include "interrupt_manager.h"

    %% By default PIL enables the UART communication
    #include "lpuart_driver.h"
    #include "lpuart_hw_access.h"
    #include "rtiostream_uart_init.h"

    %if (mcu_steptick_timer == "LPIT Channel 0") || (codeProfilingEnabled == 1)
    #include "clock_manager.h"
    #include "lpit_driver.h"
    #include "lpit_hw_access.h"
    #include "pcc_hw_access.h"
    %endif

    #include "s32k_clock_init.h"
    %closefile tmpFcnBuf
    %<SLibSetModelFileAttribute(cFile, "Includes", tmpFcnBuf)>

    %openfile tmpFcnBuf

    %% No need to generate the tasking code, since Simulink will generate the maine function on the MCU
	%%<FcnGenerateTaskingCode()>\

    %% By default the code will be flashed on target
    %assign out = FEVAL("mbd_s32k_bl_ini")
    %<out>
    
    %% The main function will be generated by the Simulink so we only 
    void hw_init(void)
    {
        %if "%<config_params.platform>" == "s32k14"
            #ifdef __FPU_USED
                /* FPU ENABLE */
                /* Enable CP10 and CP11 coprocessors */
                S32_SCB->CPACR |= (S32_SCB_CPACR_CP10_MASK | S32_SCB_CPACR_CP11_MASK);
            #endif
        %endif

        /* Clock initialization */
        Clock_Setup();

        rtiostream_uart_init(%<FEVAL("mbd_s32k_get_config_param", "pil_download_rate")>);
        %<FcnGenerateProfilerInit()>\
    }
    %closefile tmpFcnBuf
    %<SLibSetModelFileAttribute(cFile, "Functions", tmpFcnBuf)>

    %<FcnGenerateAdditionalCode()>\
%endfunction


%function FcnGenerateTaskingCode() Output

    %assign singleTasking = SLibSingleTasking()

    void SYSTEM_INIT_TASK(void)
    {
        /* Initialize model */
        %<FcnMdlName()>_initialize(%<SLibModelFcnArgs("Initialize",TLC_TRUE,"")>);
    }

    void SYSTEM_TASK(void)
    {
        %if NumSynchronousSampleTimes == 1
            %% ----------- Single rate (Single Tasking by default) -----------

            %<FcnCallMdlStep("")>\
        %elseif !singleTasking
            %% ----------- Multirate/Multitasking -----------

            %assign tid01Eq = FixedStepOpts.TID01EQ
            boolean_T eventFlags[%<FcnNumST()>]; /* Model has %<FcnNumST()> rates */
            %if (FcnNumST() - tid01Eq) > 2
            int_T i;
            %endif

            %<FcnCallEventFlagsFunction("%<Name>_")>\

            /* Set model inputs associated with base rate here */
            %assign rootSystem.CurrentTID = 0

            %<FcnCallMdlStep(0)>\

            %if (FcnNumST() - tid01Eq) > 2
            for (i = %<1+tid01Eq>; i < %<FcnNumST()>; i++) {
                if (eventFlags[i]) {
                    %<FcnCallMdlStep("i")>\
                }
            }
            %else
                %assign tid = FcnNumST()-1
                if (eventFlags[%<tid>]) {
                    %assign rootSystem.CurrentTID = tid
                    /* Set model inputs associated with subrates here */

                    %<FcnCallMdlStep(tid)>\
                }
            %endif
        %else
            %% ---------------------------------

            %<FcnCallMdlStep(0)>\
        %endif
    }
%endfunction


%function FcnGenerateAdditionalCode() Output


%endfunction    %% FcnGenerateAdditionalCode


%function FcnGenerateProfilerInit() Output
    %assign config_params = FEVAL("mbd_s32k_get_main_config_params")
    %assign codeProfilingEnabled = FEVAL("mbd_s32k_code_profiling_enabled")

    %if codeProfilingEnabled == 1
    {
        uint32_t busClock;

        /* Un-gate pit clock*/
        PCC_SetPeripheralClockControl(PCC, %<config_params.lpit_clock_name>, true, %<config_params.lpit_clock_source>, 0, 0);

        /* Enable PIT module clock*/
        LPIT_Enable(LPIT0, 0U);

        /* Finally, update pit source clock frequency.*/
        CLOCK_SYS_GetFreq(%<config_params.lpit_clock_name>, &busClock);
    }

    profiler_init();
    %endif
%endfunction

