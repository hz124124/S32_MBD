
%implements GMCLIB_PwmIct_SF_F32 "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GFLIB_INCLUDED")
      %assign ::GFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gflib.h\"" + "\n")>
   %endif 
   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign alpha  = LibBlockInputSignal(0, "", "", 0)
  %assign beta   = LibBlockInputSignal(1, "", "", 0)
  %assign out1   = LibBlockOutputSignal(0, "", "", 0)
  %assign out2   = LibBlockOutputSignal(1, "", "", 0)
  %assign out3   = LibBlockOutputSignal(2, "", "", 0)
  %assign sector = LibBlockOutputSignal(3, "", "", 0)
  
  {  
    SWLIBS_3Syst_F32 Out;
	SWLIBS_2Syst_F32 In;
	
	In.f32Arg1 = %<alpha>;
	In.f32Arg2 = %<beta>; 
	
    %<sector> = GMCLIB_PwmIct_F32(&Out, &In);
	%<out1> = Out.f32Arg1;
	%<out2> = Out.f32Arg2;
	%<out3> = Out.f32Arg3;
  }

%endfunction
