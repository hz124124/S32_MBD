
%implements GMCLIB_Park_SF_F16 "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign alpha = LibBlockInputSignal(0, "", "", 0)
  %assign beta  = LibBlockInputSignal(1, "", "", 0)
  %assign sin   = LibBlockInputSignal(2, "", "", 0)
  %assign cos   = LibBlockInputSignal(3, "", "", 0)
  %assign d     = LibBlockOutputSignal(0, "", "", 0)
  %assign q     = LibBlockOutputSignal(1, "", "", 0)
  
  {  
    SWLIBS_2Syst_F16 Out;
	SWLIBS_2Syst_F16 In;
	SWLIBS_2Syst_F16 InAngle;
	const SWLIBS_2Syst_F16 *const pIn = &In;
	const SWLIBS_2Syst_F16 *const pInAngle = &InAngle;
	
	In.f16Arg1 = %<alpha>;
	In.f16Arg2 = %<beta>; 
    InAngle.f16Arg1 = %<sin>;
    InAngle.f16Arg2 = %<cos>;
    GMCLIB_Park_F16 (&Out, pInAngle, pIn);
	%<d> = Out.f16Arg1;
	%<q> = Out.f16Arg2;
  }

%endfunction
