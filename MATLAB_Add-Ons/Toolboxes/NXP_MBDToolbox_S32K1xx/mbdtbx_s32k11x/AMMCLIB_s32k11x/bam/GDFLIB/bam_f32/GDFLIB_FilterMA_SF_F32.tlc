
%implements GDFLIB_FilterMA_SF_F32 "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GDFLIB_INCLUDED")
      %assign ::GDFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gdflib.h\"" + "\n")>
   %endif 
   
   %assign ::cntMA = 0
   %assign ::cntInitMA = 0
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   %assign ::cntInitMA = %<::cntInitMA> + 1
	 
%assign fFIRparams = LibCreateSourceFile("Source", "Custom", "FIRparams")
%openfile tmpParamBuf 
   %if !EXISTS("GDFLIB_INCLUDED_TO_FIRPARAM")
      %assign ::GDFLIB_INCLUDED_TO_FIRPARAM = 1
      #include "gdflib.h"
   %endif 
    GDFLIB_FILTER_MA_T_F32 trMyFilterMA_%<::cntInitMA> = GDFLIB_FILTER_MA_DEFAULT_F32;
%closefile tmpParamBuf
%<LibSetSourceFileSection(fFIRparams , "Definitions", tmpParamBuf)>

    %assign u16NSamples   = CAST("Number",Parameter[0].Value[0])
	
	trMyFilterMA_%<::cntInitMA>.u16NSamples = %<u16NSamples>;  
	 
    GDFLIB_FilterMAInit_F32 (&trMyFilterMA_%<::cntInitMA>);
   
%openfile tmpParamExternBuf 
    extern GDFLIB_FILTER_MA_T_F32 trMyFilterMA_%<::cntInitMA>;
%closefile tmpParamExternBuf
%<LibCacheExtern(tmpParamExternBuf)>   
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

    %assign ::cntMA = %<::cntMA> + 1

    %assign f32In = LibBlockInputSignal(0, "", "", 0)
    %assign f32InAcc = LibBlockInputSignal(1, "", "", 0)
    %assign f32Out = LibBlockOutputSignal(0, "", "", 0)
    %assign f32OutAcc = LibBlockOutputSignal(1, "", "", 0)

	trMyFilterMA_%<::cntMA>.f32Acc = %<f32InAcc>;    

    %<f32Out> = GDFLIB_FilterMA_F32(%<f32In>, &trMyFilterMA_%<::cntMA>);

	%<f32OutAcc> = trMyFilterMA_%<::cntMA>.f32Acc;

%endfunction
