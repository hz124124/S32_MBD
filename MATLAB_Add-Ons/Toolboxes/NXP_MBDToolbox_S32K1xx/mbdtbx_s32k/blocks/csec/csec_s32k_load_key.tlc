%implements csec_s32k_load_key "C"

%% Copyright (c) 2017 NXP.
%% All rights reserved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once per block type before code generation begins
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup(block, system) void
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)

    %<LibAddToCommonIncludes("csec_driver.h")>

    %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once and only once at the beginning of the simulation
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)

    %if !EXISTS("CSEc_INITIALIZE")
        %% INITIALIZE ONCE
        %assign ::CSEc_INITIALIZE = 1

        %openfile declarationsBuf
        csec_state_t csec1_State;
        %closefile declarationsBuf
        %<LibSetSourceFileSection(LibGetModelDotCFile(), "Declarations", declarationsBuf)>

        %openfile externBuf
        extern csec_state_t csec1_State;
        %closefile externBuf
        %<LibCacheExtern(externBuf)>

        CSEC_DRV_Init(&csec1_State);
    %endif

    %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes at each step of the simulation
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs(block, system) Output
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)
    %assign blockPath = LibGetBlockPath(block)

    %assign status = LibBlockOutputSignal(0, "", "", 0)

    %assign sdk_params = FEVAL("mbd_s32k_csec_load_key_sdk_params", blockPath)
    %with sdk_params
        %if loadPlainKey == "true"
            %assign plainKey = LibBlockInputSignalAddr(0, "", "", 0)

            %<status> = CSEC_DRV_LoadPlainKey(%<plainKey>);
        %else
            %assign m1 = LibBlockInputSignalAddr(0, "", "", 0)
            %assign m2 = LibBlockInputSignalAddr(1, "", "", 0)
            %assign m3 = LibBlockInputSignalAddr(2, "", "", 0)
            {
                uint8_t m4[32];
                uint8_t m5[16];

                %<status> = CSEC_DRV_LoadKey(%<keyId>, %<m1>, %<m2>, %<m3>, m4, m5);
            }
        %endif
    %endwith

    %endif
%endfunction
