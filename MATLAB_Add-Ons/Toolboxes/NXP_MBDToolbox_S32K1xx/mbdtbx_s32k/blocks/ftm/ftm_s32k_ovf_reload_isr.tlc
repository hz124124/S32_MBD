%implements ftm_s32k_ovf_reload_isr "C"

%% Copyright (c) 2018 NXP.
%% All rights reserved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes for all the blocks that have this function defined in
%% their target files in a model
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup(block, system) void
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)

    %<LibAddToCommonIncludes("ftm_hw_access.h")>
    %<LibAddToCommonIncludes("interrupt_manager.h")>

    %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once and only once at the beginning of the simulation
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)
    %assign blockPath = LibGetBlockPath(block)

    %assign params = FEVAL("mbd_s32k_ftm_pwm_ovf_realod_sdk_params", blockPath)
    %assign ftmModule = %<params.ftmModule>
    %<LibAddToCommonIncludes("ftm%<ftmModule>_ovf_reload_isr.h")>

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%  Interrupt handler body file
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %openfile isr_c = "ftm%<ftmModule>_ovf_reload_isr.c"
        #include "%<CompiledModel.Name + ".h">"
        #include "%<CompiledModel.Name + "_private.h">"
        #include "ftm%<ftmModule>_ovf_reload_isr.h"
        #include "ftm_hw_access.h"
        #include "ftm_common.h"

        void FTM%<ftmModule>_ovf_reload_isr(void)
        {
            /* Attached S-Function call */
            %foreach fcnCallIdx = NumSFcnSysOutputCalls
                %% call the downstream system
                %with SFcnSystemOutputCall[fcnCallIdx]

                %% skip unconnected function call outputs
                %if ISEQUAL(BlockToCall, "unconnected")
                    %continue
                %endif

                %<LibBlockExecuteFcnCall(block, fcnCallIdx)>
                %endwith
            %endforeach

            if(FTM_DRV_GetReloadFlag(FTM%<ftmModule>))
            {
                /* FTM%<ftmModule>: clear module overflow ISR flag */
                FTM_DRV_ClearStatusFlags(FTM_PWM%<ftmModule>, FTM_RELOAD_FLAG);
            }

            if(FTM_DRV_HasTimerOverflowed(FTM%<ftmModule>))
            {
                /* FTM%<ftmModule>: clear module overflow ISR flag */
                FTM_DRV_ClearStatusFlags(FTM_PWM%<ftmModule>, FTM_TIME_OVER_FLOW_FLAG);
            }
        }
    %closefile isr_c

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%  Interrupt handler declaration file
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %openfile isr_h = "ftm%<ftmModule>_ovf_reload_isr.h"
        #ifndef FTM%<ftmModule>_OVF_RELOAD_ISR_H
        #define FTM%<ftmModule>_OVF_RELOAD_ISR_H

        void FTM%<ftmModule>_ovf_reload_isr(void);

        #endif
    %closefile isr_h

    %endif
%endfunction
