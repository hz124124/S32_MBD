%implements adc_s32k_config "C"

%% Copyright (c) 2019 NXP.
%% All rights reserved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once per block type before code generation begins
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup(block, system) void
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)

    %<LibAddToCommonIncludes("adc_driver.h")>
    %<LibAddToCommonIncludes("device_registers.h")>
    %<LibAddToCommonIncludes("pcc_hw_access.h")>
    %<LibAddToCommonIncludes("clock_manager.h")>

    %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once and only once at the beginning of the simulation
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)
    %assign blockPath = LibGetBlockPath(block)

    %assign info = FEVAL("mbd_s32k_adc_config_params", blockPath)
    %with info
    {
        const adc_converter_config_t adc%<instance>_cfg =
        {
            .clockDivide            = %<clockDivide>,
            .sampleTime             = %<sampleTime - 1>,
            .resolution             = %<resolution>,
            .inputClock             = %<inputClock>,
            .trigger                = %<trigger>,
            .pretriggerSel          = %<pretrgsel>,
            .triggerSel             = %<trgsel>,
            .dmaEnable              = false,
            .voltageRef             = %<voltageRef>,
            .continuousConvEnable   = %<continuousConvEnable>,
            .supplyMonitoringEnable = %<supplyMonitoring>
        };

        const adc_compare_config_t adc%<instance>_cmp_cfg =
        {
            .compareEnable              = %<compareEnable>,
            .compareGreaterThanEnable   = %<compareGreaterThanEnable>,
            .compareRangeFuncEnable     = %<compareRangeFuncEnable>,
            .compVal1           = %<compVal1>,
            .compVal2           = %<compVal2>
        };

        const adc_average_config_t adc%<instance>_avrg_cfg =
        {
            .hwAvgEnable = %<hwAvgEnable>,
            .hwAverage   = %<hwAverage>
        };

        /* Enable ADC%<instance> clock */
        PCC_SetClockMode(PCC, %<periph_clock>, false);

        /* Set ADC%<instance> clock source */
        PCC_SetPeripheralClockControl(PCC, %<periph_clock>, true, %<clock_source>, 0, 0);

        /* Enable ADC%<instance> clock */
        PCC_SetClockMode(PCC, %<periph_clock>, true);

        ADC_DRV_Reset(%<instance>);

        /* Configure ADC%<instance> */
        ADC_DRV_ConfigConverter(%<instance>, &adc%<instance>_cfg);

        ADC_DRV_SetSwPretrigger(%<instance>,%<swpretrg>);

        ADC_DRV_ConfigHwCompare(%<instance>, &adc%<instance>_cmp_cfg);

        ADC_DRV_ConfigHwAverage(%<instance>, &adc%<instance>_avrg_cfg);

        /* Do calibration before initialize the ADC%<instance>. */
        //ADC_DRV_AutoCalibration(%<instance>);
    }
    %endwith

    %endif
%endfunction
