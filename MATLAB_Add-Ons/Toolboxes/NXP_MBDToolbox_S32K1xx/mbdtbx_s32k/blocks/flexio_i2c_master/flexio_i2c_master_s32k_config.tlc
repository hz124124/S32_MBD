%implements flexio_i2c_master_s32k_config "C"

%% Copyright (c) 2019 NXP.
%% All rights reserved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once per block type before code generation begins
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup(block, system) void
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)
    %assign blockPath = LibGetBlockPath(block)

    %assign sdk_params = FEVAL("mbd_s32k_flexio_i2c_master_config_sdk_params", blockPath)

    %<LibAddToCommonIncludes("device_registers.h")>
    %<LibAddToCommonIncludes("flexio.h")>
    %<LibAddToCommonIncludes("flexio_i2c_driver.h")>
    %<LibAddToCommonIncludes("flexio_common.h")>
    %<LibAddToCommonIncludes("pins_driver.h")>
    %<LibAddToCommonIncludes("pcc_hw_access.h")>
    %<LibAddToCommonIncludes("clock_S32K1xx.h")>

    %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Function executes once and only once at the beginning of the simulation
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
    %if FEVAL("mbd_s32k_is_codegen_compatible", CompiledModel.Name)
    %assign blockPath = LibGetBlockPath(block)

    %assign sdk_params = FEVAL("mbd_s32k_flexio_i2c_master_config_sdk_params", blockPath)
    %with sdk_params

        %% declare global variables
        %openfile declarationsBuf
            flexio_i2c_master_state_t i2cMasterState%<user_config.InstanceNumber>;
            flexio_device_state_t flexIODeviceState;
        %closefile declarationsBuf
        %<LibSetSourceFileSection(LibGetModelDotCFile(), "Definitions", declarationsBuf)>

        %% make a header file that contains includes and extern declarations of global variables
        %assign headerName = "fxio_i2c_%<user_config.InstanceNumber>_isr"
        %assign headerfName = LibCreateSourceFile("Header", "Custom", "%<headerName>")
        %openfile headerBuf
            #include "flexio.h"
            #include "flexio_i2c_driver.h"
            #include "flexio_common.h"

            extern flexio_i2c_master_state_t i2cMasterState%<user_config.InstanceNumber>;
            extern bool rx_callback;
            extern bool tx_callback;
            extern void triggerReceiveSubsystem();
            extern void triggerTransmitSubsystem();
            void flexio_i2c_callback(i2c_master_event_t ev, void *userData);
        %closefile headerBuf
        %<LibSetSourceFileSection(headerfName, "Includes", headerBuf)>
        %<LibAddToCommonIncludes("fxio_i2c_%<user_config.InstanceNumber>_isr.h")>

        %% open fxio<#>_isr.c and implement the callback
        %assign name = "fxio_i2c_%<user_config.InstanceNumber>_isr"

        %assign fname = LibCreateSourceFile("Source", "Custom", "%<name>")
        %openfile tmpFcnBuf
            #include "fxio_i2c_%<user_config.InstanceNumber>_isr.h"
            #include "%<CompiledModel.Name + ".h">"
            #include "%<CompiledModel.Name + "_private.h">"

            void flexio_i2c_callback(i2c_master_event_t ev, void *userData){
            /* called upon event ev (eg. - end of transfer) */
        %closefile tmpFcnBuf
        %<LibSetSourceFileSection(fname, "UserTop", tmpFcnBuf)>

        %openfile tmpFcnBuf
            }/* end of callback */
        %closefile tmpFcnBuf
        %<LibSetSourceFileSection(fname, "UserBottom", tmpFcnBuf)>

        {
            /* Enable clock for flexIO and GPIO (FXIO_Dn pins) */
            PCC_SetPeripheralClockControl(PCC, FLEXIO0_CLK, true, CLK_SRC_FIRC, DIVIDE_BY_ONE, MULTIPLY_BY_ONE);
            PCC_SetPeripheralClockControl(PCC, %<user_config.SDAInfo.user_config.port>_CLK, true, CLK_SRC_OFF, DIVIDE_BY_ONE, MULTIPLY_BY_ONE);
            PCC_SetPeripheralClockControl(PCC, %<user_config.SDAInfo.user_config.port>_CLK, true, CLK_SRC_OFF, DIVIDE_BY_ONE, MULTIPLY_BY_ONE);

            /* Configure flexIO */
            const flexio_i2c_master_user_config_t flexio_i2c_MasterConfig%<user_config.InstanceNumber> = {
                .driverType    = %<user_config.DriverType>,
                .baudRate      = %<user_config.BaudRate>,
                .slaveAddress  = 0U,
                .sdaPin        = %<user_config.SDAInfo.user_config.fxio_pin>,
                .sclPin        = %<user_config.SCLInfo.user_config.fxio_pin>,
                .callback      = (i2c_master_callback_t)flexio_i2c_callback,
                .callbackParam = NULL,
                .txDMAChannel  = 255,
                .rxDMAChannel  = 255,
            };

            /* Setup flexio instance%<user_config.InstanceNumber> pins */
            pin_settings_config_t fxio_pin_mux%<user_config.InstanceNumber>[2]={
            {
                .base          = %<user_config.SDAInfo.user_config.port>,
                .pinPortIdx    = %<user_config.SDAInfo.user_config.pin>,
                .pullConfig    = PORT_INTERNAL_PULL_NOT_ENABLED,
                .passiveFilter = false,
                .driveSelect   = PORT_LOW_DRIVE_STRENGTH,
                .mux           = %<user_config.SDAInfo.user_config.mux>,
                .pinLock       = false,
                .intConfig     = PORT_DMA_INT_DISABLED,
                .clearIntFlag  = false,
                .gpioBase      = NULL,
            },
            {
                .base          = %<user_config.SCLInfo.user_config.port>,
                .pinPortIdx    = %<user_config.SCLInfo.user_config.pin>,
                .pullConfig    = PORT_INTERNAL_PULL_UP_ENABLED,
                .passiveFilter = false,
                .driveSelect   = PORT_LOW_DRIVE_STRENGTH,
                .mux           = %<user_config.SCLInfo.user_config.mux>,
                .pinLock       = false,
                .intConfig     = PORT_DMA_INT_DISABLED,
                .clearIntFlag  = false,
                .gpioBase      = NULL,
            }};
            PINS_DRV_Init(2, fxio_pin_mux%<user_config.InstanceNumber>);

            /* Init the FLEXIO device */
            FLEXIO_DRV_InitDevice(0, &flexIODeviceState);

            /* Initialize FlexIO I2C driver as bus master */
            FLEXIO_I2C_DRV_MasterInit(0, &flexio_i2c_MasterConfig%<user_config.InstanceNumber>, &i2cMasterState%<user_config.InstanceNumber>);
        }
    %endwith

    %endif
%endfunction
